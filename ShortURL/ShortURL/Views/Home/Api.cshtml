@{
    ViewData["Title"] = "API Documentation";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 mb-4">URL Shortener API Documentation</h1>
            <p class="lead">RESTful API for creating and managing shortened URLs with metadata tracking.</p>
            
            <div class="alert alert-info">
                <strong>Base URL:</strong> <code>http://localhost:5201</code>
            </div>
        </div>
    </div>

    <!-- All Shortened URLs Table (moved to top) -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="mb-0">All Shortened URLs</h3>
            <button class="btn btn-success" onclick="loadAllUrls()">🔄 Refresh Table</button>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="urlsTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Short Code</th>
                            <th>Short URL</th>
                            <th>Original URL</th>
                            <th>Created</th>
                            <th>Clicks</th>
                            <th>Last Accessed</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="urlsTableBody">
                        <tr>
                            <td colspan="7" class="text-center text-muted">
                                <div class="spinner-border spinner-border-sm" role="status"></div>
                                Loading URLs...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Create Short URL -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">
                <span class="badge bg-success me-2">POST</span>
                Create Short URL
            </h3>
        </div>
        <div class="card-body">
            <h5>Endpoint</h5>
            <code>/api/urls/shorten</code>
            
            <h5 class="mt-3">Request Body</h5>
            <pre class="bg-light p-3 rounded"><code>{
   "longUrl": "https://www.example.com/very/long/url/that/needs/shortening",
   "customCode": "mycustom"  // Optional: custom short code
 }</code></pre>
            
            <h5 class="mt-3">Response (201 Created)</h5>
            <pre class="bg-light p-3 rounded"><code>{
  "shortUrl": "http://localhost:5201/r/abc12345"
}</code></pre>
            
            <h5 class="mt-3">Error Response (400 Bad Request)</h5>
            <pre class="bg-light p-3 rounded"><code>{
   "error": "Invalid or empty URL provided."
 }

{
   "error": "Custom code already exists. Please choose a different code."
 }</code></pre>
            
            <div class="mt-3">
                <button class="btn btn-primary" onclick="testShortenUrl()">Test API</button>
                <div id="shortenResult" class="mt-2"></div>
            </div>
        </div>
    </div>

    <!-- Get URL Metadata -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">
                <span class="badge bg-info me-2">GET</span>
                Get URL Metadata
            </h3>
        </div>
        <div class="card-body">
            <h5>Endpoint</h5>
            <code>/api/urls/metadata/{code}</code>
            
            <h5 class="mt-3">Parameters</h5>
            <ul>
                <li><code>code</code> - The short URL code (e.g., "abc12345")</li>
            </ul>
            
            <h5 class="mt-3">Response (200 OK)</h5>
            <pre class="bg-light p-3 rounded"><code>{
  "code": "abc12345",
  "originalUrl": "https://www.example.com/very/long/url",
  "createdAt": "2024-01-15T10:30:00Z",
  "clickCount": 42,
  "lastAccessedAt": "2024-01-15T14:22:15Z"
}</code></pre>
            
            <h5 class="mt-3">Error Response (404 Not Found)</h5>
            <pre class="bg-light p-3 rounded"><code>{
  "error": "Shortened URL not found."
}</code></pre>
            
            <div class="mt-3">
                <div class="input-group">
                    <input type="text" id="metadataCode" class="form-control" placeholder="Enter short code (e.g., abc12345)">
                    <button class="btn btn-info" onclick="testGetMetadata()">Test API</button>
                </div>
                <div id="metadataResult" class="mt-2"></div>
            </div>
        </div>
    </div>

    <!-- Redirect to Original URL -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">
                <span class="badge bg-warning me-2">GET</span>
                Redirect to Original URL
            </h3>
        </div>
        <div class="card-body">
            <h5>Endpoint</h5>
            <code>/r/{code}</code>
            
            <h5 class="mt-3">Parameters</h5>
            <ul>
                <li><code>code</code> - The short URL code (e.g., "abc12345")</li>
            </ul>
            
            <h5 class="mt-3">Response</h5>
            <ul>
                <li><strong>302 Redirect</strong> - Redirects to the original URL and increments click count</li>
                <li><strong>404 Not Found</strong> - If the short code doesn't exist</li>
            </ul>
            
            <div class="mt-3">
                <div class="input-group">
                    <input type="text" id="redirectCode" class="form-control" placeholder="Enter short code (e.g., abc12345)">
                    <button class="btn btn-warning" onclick="testRedirect()">Test Redirect</button>
                </div>
                <div id="redirectResult" class="mt-2"></div>
            </div>
        </div>
    </div>

    

    <!-- API Usage Examples -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="mb-0">Usage Examples</h3>
        </div>
        <div class="card-body">
            <h5>JavaScript/Fetch</h5>
            <pre class="bg-light p-3 rounded"><code>// Create a short URL
const response = await fetch('/api/urls/shorten', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ longUrl: 'https://example.com' })
});
const data = await response.json();
console.log(data.shortUrl);

// Get all URLs
const allUrls = await fetch('/api/urls');
const urlsData = await allUrls.json();
console.log(urlsData);

// Get metadata
const metadata = await fetch('/api/urls/metadata/abc12345');
const metadataData = await metadata.json();
console.log(metadataData.clickCount);</code></pre>
            
            <h5 class="mt-3">cURL</h5>
            <pre class="bg-light p-3 rounded"><code># Create short URL
curl -X POST http://localhost:5201/api/urls/shorten \
  -H "Content-Type: application/json" \
  -d '{"longUrl": "https://example.com"}'

# Get all URLs
curl http://localhost:5201/api/urls

# Get metadata
curl http://localhost:5201/api/urls/metadata/abc12345

# Follow redirect
curl -L http://localhost:5201/r/abc12345</code></pre>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function testShortenUrl() {
            const resultDiv = document.getElementById('shortenResult');
            resultDiv.innerHTML = '<div class="spinner-border spinner-border-sm" role="status"></div> Testing...';
            
            try {
                const response = await fetch('/api/urls/shorten', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        longUrl: 'https://www.google.com',
                        customCode: 'test' + Date.now().toString().slice(-4)
                    })
                });
               
               const data = await response.json();
               
               if (response.ok) {
                   resultDiv.innerHTML = `
                       <div class="alert alert-success">
                           <strong>Success!</strong><br>
                           Short URL: <a href="${data.shortUrl}" target="_blank">${data.shortUrl}</a>
                       </div>
                   `;
               } else {
                   resultDiv.innerHTML = `
                       <div class="alert alert-danger">
                           <strong>Error ${response.status}:</strong> ${data.error}
                       </div>
                   `;
               }
           } catch (error) {
               resultDiv.innerHTML = `
                   <div class="alert alert-danger">
                       <strong>Error:</strong> ${error.message}
                   </div>
               `;
           }
        }

        async function testGetMetadata() {
            const code = document.getElementById('metadataCode').value.trim();
            const resultDiv = document.getElementById('metadataResult');
            
            if (!code) {
                resultDiv.innerHTML = '<div class="alert alert-warning">Please enter a short code</div>';
                return;
            }
            
            resultDiv.innerHTML = '<div class="spinner-border spinner-border-sm" role="status"></div> Testing...';
            
            try {
                const response = await fetch(`/api/urls/metadata/${code}`);
                const data = await response.json();
                
                if (response.ok) {
                    resultDiv.innerHTML = `
                        <div class="alert alert-success">
                            <strong>Success!</strong><br>
                            <pre class="mt-2">${JSON.stringify(data, null, 2)}</pre>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <strong>Error ${response.status}:</strong> ${data.error}
                        </div>
                    `;
                }
            } catch (error) {
                resultDiv.innerHTML = `
                    <div class="alert alert-danger">
                        <strong>Error:</strong> ${error.message}
                    </div>
                `;
            }
        }

        function testRedirect() {
            const code = document.getElementById('redirectCode').value.trim();
            const resultDiv = document.getElementById('redirectResult');
            
            if (!code) {
                resultDiv.innerHTML = '<div class="alert alert-warning">Please enter a short code</div>';
                return;
            }
            
            const redirectUrl = `/r/${code}`;
            resultDiv.innerHTML = `
                <div class="alert alert-info">
                    <strong>Redirect URL:</strong> <a href="${redirectUrl}" target="_blank">${redirectUrl}</a><br>
                    <small>Click the link above to test the redirect (opens in new tab)</small>
                </div>
            `;
        }

        async function loadAllUrls() {
            const tbody = document.getElementById('urlsTableBody');
            tbody.innerHTML = '<tr><td colspan="7" class="text-center text-muted"><div class="spinner-border spinner-border-sm" role="status"></div> Loading URLs...</td></tr>';
            
            try {
                const response = await fetch('/api/urls');
                const urls = await response.json();
                
                if (response.ok) {
                    if (urls.length === 0) {
                        tbody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">No shortened URLs found. Create one using the form above!</td></tr>';
                        return;
                    }
                    
                    tbody.innerHTML = urls.map(url => `
                        <tr>
                            <td><code>${url.code}</code></td>
                            <td><a href="${url.shortUrl}" target="_blank">${url.shortUrl}</a></td>
                            <td>
                                <div class="text-truncate" style="max-width: 200px;" title="${url.originalUrl}">
                                    <a href="${url.originalUrl}" target="_blank">${url.originalUrl}</a>
                                </div>
                            </td>
                            <td>${new Date(url.createdAt).toLocaleString()}</td>
                            <td><span class="badge bg-primary">${url.clickCount}</span></td>
                            <td>${url.lastAccessedAt ? new Date(url.lastAccessedAt).toLocaleString() : 'Never'}</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" onclick="openEditModal('${url.code}', '${url.originalUrl.replace(/'/g, "&#39;")}')" title="Edit">
                                    ✏️
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="confirmDeleteUrl('${url.code}')" title="Delete">
                                    🗑️
                                </button>
                            </td>
                        </tr>
                    `).join('');
                } else {
                    tbody.innerHTML = '<tr><td colspan="7" class="text-center text-danger">Error loading URLs</td></tr>';
                }
            } catch (error) {
                tbody.innerHTML = '<tr><td colspan="7" class="text-center text-danger">Error: ' + error.message + '</td></tr>';
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            loadAllUrls();
        });

        function openEditModal(code, originalUrl) {
            const modalHtml = `
                <div class="modal fade" id="editModal" tabindex="-1">
                  <div class="modal-dialog">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title">Edit Short URL</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body">
                        <div class="mb-3">
                          <label class="form-label">Current Code</label>
                          <input type="text" class="form-control" id="editCode" value="${code}" disabled>
                        </div>
                        <div class="mb-3">
                          <label class="form-label">New Code (optional)</label>
                          <input type="text" class="form-control" id="editNewCode" placeholder="Leave empty to keep same code">
                          <div class="form-text">Letters, numbers, hyphen only. Max 64.</div>
                        </div>
                        <div class="mb-3">
                          <label class="form-label">Original URL</label>
                          <input type="url" class="form-control" id="editOriginalUrl" value="${originalUrl}">
                        </div>
                        <div id="editError" class="text-danger small"></div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="submitEdit()">Save changes</button>
                      </div>
                    </div>
                  </div>
                </div>`;

            const container = document.createElement('div');
            container.innerHTML = modalHtml;
            document.body.appendChild(container);
            const modalEl = document.getElementById('editModal');
            const modal = new bootstrap.Modal(modalEl);
            modal.show();

            modalEl.addEventListener('hidden.bs.modal', () => container.remove());

            window.submitEdit = async function() {
                const newCode = document.getElementById('editNewCode').value.trim();
                const newOriginalUrl = document.getElementById('editOriginalUrl').value.trim();
                const errorEl = document.getElementById('editError');
                errorEl.textContent = '';

                try {
                    const response = await fetch(`/api/urls/${code}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            newCode: newCode || undefined,
                            originalUrl: newOriginalUrl || undefined
                        })
                    });
                    const data = await response.json().catch(() => ({}));
                    if (!response.ok) {
                        errorEl.textContent = data.error || `Error ${response.status}`;
                        return;
                    }
                    modal.hide();
                    loadAllUrls();
                } catch (err) {
                    errorEl.textContent = err.message;
                }
            }
        }

        async function confirmDeleteUrl(code) {
            if (!confirm(`Delete short URL with code "${code}"? This cannot be undone.`)) return;
            try {
                const response = await fetch(`/api/urls/${code}`, { method: 'DELETE' });
                if (response.status === 204) {
                    loadAllUrls();
                } else {
                    const data = await response.json().catch(() => ({}));
                    alert(data.error || `Error ${response.status}`);
                }
            } catch (err) {
                alert(err.message);
            }
        }
    </script>
}


